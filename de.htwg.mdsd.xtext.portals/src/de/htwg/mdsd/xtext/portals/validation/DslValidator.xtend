/*
 * generated by Xtext
 */
package de.htwg.mdsd.xtext.portals.validation
import de.htwg.mdsd.xtext.portals.dsl.Bot
import java.util.List

import org.eclipse.xtext.validation.Check
import de.htwg.mdsd.xtext.portals.dsl.DslPackage
import de.htwg.mdsd.xtext.portals.dsl.Terrain
import de.htwg.mdsd.xtext.portals.dsl.Player
import de.htwg.mdsd.xtext.portals.dsl.Game

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class DslValidator extends AbstractDslValidator {

	@Check
	def checkEntitys(Game game) {
		game.bots
		
	}

	@Check
	def checkColor(Bot bot) {
		var List<String> list = newArrayList
		list.add("yellow")
		list.add("green")
		list.add("red")
		list.add("blue")
		
		if (!list.contains(bot.color)) {
			error('Color is not available. Use ' + list, DslPackage.Literals.BOT__COLOR)
		}
	}
	
	@Check
	def checkDestroy(Bot bot) {
		for (var i = 0; i < bot.destroy.length; i++) {
			if (i != bot.destroy.lastIndexOf(bot.destroy.get(i))) {
				error("The same bot is multiple times available.", DslPackage.Literals.BOT__DESTROY)
			} else if (bot.name.equals(bot.destroy.get(i).name)) {
				error("A bot cannot destroy itself.", DslPackage.Literals.BOT__DESTROY)
			}
		}
	}
	
	@Check
	def checkDestroy(Player player) {
		for (var i = 0; i < player.destroy.length; i++) {
			if (i != player.destroy.lastIndexOf(player.destroy.get(i))) {
				error("The same bot is multiple times available.", DslPackage.Literals.PLAYER__DESTROY)
			}
		}
	}
	
	@Check
	def checkColor(Player player) {
		var List<String> list = newArrayList
		list.add("yellow")
		list.add("green")
		list.add("red")
		list.add("blue")
		
		if (!list.contains(player.color)) {
			error('Color is not available. Use ' + list, DslPackage.Literals.PLAYER__COLOR)
		}
	}
	
	@Check
	def checkImage(Terrain terrain) {
		var List<String> list = newArrayList
		list.add("black")
		list.add("blue")
		list.add("brown")
		list.add("green")
		list.add("red")
		list.add("white")
		list.add("grass")
		list.add("portal")
		list.add("swamp")
		list.add("wall")
		
		if (!list.contains(terrain.image)) {
			error('Image is not available. Use ' + list, DslPackage.Literals.TERRAIN__IMAGE)
		}
	}

}
